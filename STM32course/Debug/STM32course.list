
STM32course.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ea0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001038  08001038  00002038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001084  08001084  0000258c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001084  08001084  00002084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800108c  0800108c  0000258c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800108c  0800108c  0000208c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001090  08001090  00002090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000400  08001094  00002400  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000a20  2000058c  08001220  0000258c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fac  08001220  00002fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002afb  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b22  00000000  00000000  000050b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003c8  00000000  00000000  00005be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002c0  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001495c  00000000  00000000  00006268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d9d  00000000  00000000  0001abc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082681  00000000  00000000  0001e961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000de4  00000000  00000000  000a1028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000a1e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000058c 	.word	0x2000058c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001018 	.word	0x08001018

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000590 	.word	0x20000590
 80001d4:	08001018 	.word	0x08001018

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <Leds_Init>:
#define GPIOC_BASE_ADDR 0x40020800
#define GPIOD_BASE_ADDR 0x40020C00
#define GPIOE_BASE_ADDR 0x40021000
#define SPI_Base_Addr 0x40013000
void Leds_Init()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <Leds_Init+0x4c>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000234 <Leds_Init+0x4c>)
 80001f8:	f043 0308 	orr.w	r3, r3, #8
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000234 <Leds_Init+0x4c>)
 8000200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000202:	f003 0308 	and.w	r3, r3, #8
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

	// TODO: config PD12, PD13, PD14, PD15 in OUTPUT MDOE
	uint32_t *GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR + 0x00);
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <Leds_Init+0x50>)
 800020c:	607b      	str	r3, [r7, #4]
	*GPIOD_MODER &= ~(0b11111111 << 24);
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01010101 << 24);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 42aa 	orr.w	r2, r3, #1426063360	@ 0x55000000
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]

}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40023800 	.word	0x40023800
 8000238:	40020c00 	.word	0x40020c00

0800023c <Led_Ctrl>:
	OFF_LED,
	ON_LED,
} led_state_t;

void Led_Ctrl(led_t led, led_state_t state)
{
 800023c:	b480      	push	{r7}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	460a      	mov	r2, r1
 8000246:	71fb      	strb	r3, [r7, #7]
 8000248:	4613      	mov	r3, r2
 800024a:	71bb      	strb	r3, [r7, #6]
	// TODO: write state ODR
	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 800024c:	4b11      	ldr	r3, [pc, #68]	@ (8000294 <Led_Ctrl+0x58>)
 800024e:	60fb      	str	r3, [r7, #12]
	if(state == ON_LED){
 8000250:	79bb      	ldrb	r3, [r7, #6]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d109      	bne.n	800026a <Led_Ctrl+0x2e>
		*GPIOD_ODR |= (0b1 << (12 + led));
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	320c      	adds	r2, #12
 800025e:	2101      	movs	r1, #1
 8000260:	fa01 f202 	lsl.w	r2, r1, r2
 8000264:	431a      	orrs	r2, r3
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

	}
	if(state == OFF_LED){
 800026a:	79bb      	ldrb	r3, [r7, #6]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d10a      	bne.n	8000286 <Led_Ctrl+0x4a>
		*GPIOD_ODR &= ~(0b1 << (12 + led));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	79fa      	ldrb	r2, [r7, #7]
 8000276:	320c      	adds	r2, #12
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	43d2      	mvns	r2, r2
 8000280:	401a      	ands	r2, r3
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
	}
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40020c14 	.word	0x40020c14

08000298 <PA0_input_Init>:

// config PA0 input: button signal
void PA0_input_Init()
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800029e:	2300      	movs	r3, #0
 80002a0:	603b      	str	r3, [r7, #0]
 80002a2:	4b0d      	ldr	r3, [pc, #52]	@ (80002d8 <PA0_input_Init+0x40>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a0c      	ldr	r2, [pc, #48]	@ (80002d8 <PA0_input_Init+0x40>)
 80002a8:	f043 0301 	orr.w	r3, r3, #1
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <PA0_input_Init+0x40>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	f003 0301 	and.w	r3, r3, #1
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	683b      	ldr	r3, [r7, #0]

	uint32_t *GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <PA0_input_Init+0x44>)
 80002bc:	607b      	str	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 0);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f023 0203 	bic.w	r2, r3, #3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	601a      	str	r2, [r3, #0]

}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40023800 	.word	0x40023800
 80002dc:	40020000 	.word	0x40020000

080002e0 <PA0_Read>:

int PA0_Read()
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
    uint32_t *GPIOA_IDR = (uint32_t*)(GPIOA_BASE_ADDR + 0x10);
 80002e6:	4b07      	ldr	r3, [pc, #28]	@ (8000304 <PA0_Read+0x24>)
 80002e8:	607b      	str	r3, [r7, #4]
    uint32_t result = *GPIOA_IDR & 0b1;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	603b      	str	r3, [r7, #0]
    return result;
 80002f4:	683b      	ldr	r3, [r7, #0]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40020010 	.word	0x40020010

08000308 <EXTI0_IRQHandler>:

#define EXTI0_BASE_ADDR 0x40013C00 // line 0, position 6

uint32_t buttonSignal = 0;
void EXTI0_IRQHandler()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
	if((buttonSignal = PA0_Read()))
 800030e:	f7ff ffe7 	bl	80002e0 <PA0_Read>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <EXTI0_IRQHandler+0x44>)
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <EXTI0_IRQHandler+0x44>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d004      	beq.n	800032c <EXTI0_IRQHandler+0x24>
	{
		Led_Ctrl(0,1);
 8000322:	2101      	movs	r1, #1
 8000324:	2000      	movs	r0, #0
 8000326:	f7ff ff89 	bl	800023c <Led_Ctrl>
 800032a:	e003      	b.n	8000334 <EXTI0_IRQHandler+0x2c>
	}
	else Led_Ctrl(0,0);
 800032c:	2100      	movs	r1, #0
 800032e:	2000      	movs	r0, #0
 8000330:	f7ff ff84 	bl	800023c <Led_Ctrl>

	//clear interrupt flag (pending register)
	uint32_t *EXTI0_PR = (uint32_t*)(EXTI0_BASE_ADDR + 0x14);
 8000334:	4b06      	ldr	r3, [pc, #24]	@ (8000350 <EXTI0_IRQHandler+0x48>)
 8000336:	607b      	str	r3, [r7, #4]
	*EXTI0_PR |= (1<<0);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f043 0201 	orr.w	r2, r3, #1
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200005a8 	.word	0x200005a8
 8000350:	40013c14 	.word	0x40013c14

08000354 <My_Handler>:

void My_Handler()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
	if((buttonSignal = PA0_Read()))
 800035a:	f7ff ffc1 	bl	80002e0 <PA0_Read>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	4b0d      	ldr	r3, [pc, #52]	@ (8000398 <My_Handler+0x44>)
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <My_Handler+0x44>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d004      	beq.n	8000378 <My_Handler+0x24>
		{
			Led_Ctrl(1,1);
 800036e:	2101      	movs	r1, #1
 8000370:	2001      	movs	r0, #1
 8000372:	f7ff ff63 	bl	800023c <Led_Ctrl>
 8000376:	e003      	b.n	8000380 <My_Handler+0x2c>
		}
		else Led_Ctrl(1,0);
 8000378:	2100      	movs	r1, #0
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff ff5e 	bl	800023c <Led_Ctrl>

		//clear interrupt flag (pending register)
		uint32_t *EXTI0_PR = (uint32_t*)(EXTI0_BASE_ADDR + 0x14);
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <My_Handler+0x48>)
 8000382:	607b      	str	r3, [r7, #4]
		*EXTI0_PR |= (1<<0);
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f043 0201 	orr.w	r2, r3, #1
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200005a8 	.word	0x200005a8
 800039c:	40013c14 	.word	0x40013c14

080003a0 <EXTI_Init>:

void EXTI_Init()
{
 80003a0:	b480      	push	{r7}
 80003a2:	b08b      	sub	sp, #44	@ 0x2c
 80003a4:	af00      	add	r7, sp, #0
	uint32_t *EXTI0_IMR = (uint32_t*)(EXTI0_BASE_ADDR + 0x00);
 80003a6:	4b24      	ldr	r3, [pc, #144]	@ (8000438 <EXTI_Init+0x98>)
 80003a8:	623b      	str	r3, [r7, #32]
	*EXTI0_IMR |= (1 << 0);
 80003aa:	6a3b      	ldr	r3, [r7, #32]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f043 0201 	orr.w	r2, r3, #1
 80003b2:	6a3b      	ldr	r3, [r7, #32]
 80003b4:	601a      	str	r2, [r3, #0]
	uint32_t *EXTI0_RTSR = (uint32_t*)(EXTI0_BASE_ADDR + 0x08);
 80003b6:	4b21      	ldr	r3, [pc, #132]	@ (800043c <EXTI_Init+0x9c>)
 80003b8:	61fb      	str	r3, [r7, #28]
	*EXTI0_RTSR |= (1 << 0);
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f043 0201 	orr.w	r2, r3, #1
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	601a      	str	r2, [r3, #0]
	uint32_t *EXTI0_FTSR = (uint32_t*)(EXTI0_BASE_ADDR + 0x0C);
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <EXTI_Init+0xa0>)
 80003c8:	61bb      	str	r3, [r7, #24]
	*EXTI0_FTSR |= (1 << 0);
 80003ca:	69bb      	ldr	r3, [r7, #24]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f043 0201 	orr.w	r2, r3, #1
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	601a      	str	r2, [r3, #0]

	uint32_t *NVIC_ISER0 = (uint32_t*)0xE000E100;
 80003d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000444 <EXTI_Init+0xa4>)
 80003d8:	617b      	str	r3, [r7, #20]
	*NVIC_ISER0 |= (1 << 6);
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	601a      	str	r2, [r3, #0]
	//position 6 address là 0x000 0058 -> Flash -> Can't write -> Dời vector table lên RAM

	//Vector table từ 0x0000 0000 - 0x0000 0198 (kích thước: 0x198 ~ 408 byte)
	//RAM có địa chỉ bất đầu 0x2000 0000
	uint8_t* flash = (uint8_t*)0x08000000;
 80003e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003ea:	613b      	str	r3, [r7, #16]
	uint8_t* ram = (uint8_t*)0x20000000;
 80003ec:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80003f0:	60fb      	str	r3, [r7, #12]
	for (int i = 0 ; i < 408 ; i++) {
 80003f2:	2300      	movs	r3, #0
 80003f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80003f6:	e00a      	b.n	800040e <EXTI_Init+0x6e>
	ram[i] = flash[i];
 80003f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003fa:	693a      	ldr	r2, [r7, #16]
 80003fc:	441a      	add	r2, r3
 80003fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000400:	68f9      	ldr	r1, [r7, #12]
 8000402:	440b      	add	r3, r1
 8000404:	7812      	ldrb	r2, [r2, #0]
 8000406:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i < 408 ; i++) {
 8000408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800040a:	3301      	adds	r3, #1
 800040c:	627b      	str	r3, [r7, #36]	@ 0x24
 800040e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000410:	f5b3 7fcc 	cmp.w	r3, #408	@ 0x198
 8000414:	dbf0      	blt.n	80003f8 <EXTI_Init+0x58>
	}

	//Báo cho NVIC biết là vector table đã được dời lên RAM rồi. Khi có sự kiện ngắt xẩy ra, thì NVIC lên RAM để xem vector table
	uint32_t* VTOR = (uint32_t*)0xE000ED08;
 8000416:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <EXTI_Init+0xa8>)
 8000418:	60bb      	str	r3, [r7, #8]
	*VTOR = 0x20000000;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000420:	601a      	str	r2, [r3, #0]

	uint32_t *my_f = (uint32_t*)(0x20000000 + 0x58);
 8000422:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <EXTI_Init+0xac>)
 8000424:	607b      	str	r3, [r7, #4]
	*my_f = (uint32_t)My_Handler;
 8000426:	4a0a      	ldr	r2, [pc, #40]	@ (8000450 <EXTI_Init+0xb0>)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	601a      	str	r2, [r3, #0]

	//Noticed: Vector table trên RAM: 0x2000 0000 - 0x2000 0198
	//Trong khi đó buttonSignal được câp phát ở 0x2000 0028
	//-> config Ram để né VTTB: vào file STM32F411VETX_FLASH.ld
}
 800042c:	bf00      	nop
 800042e:	372c      	adds	r7, #44	@ 0x2c
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	40013c00 	.word	0x40013c00
 800043c:	40013c08 	.word	0x40013c08
 8000440:	40013c0c 	.word	0x40013c0c
 8000444:	e000e100 	.word	0xe000e100
 8000448:	e000ed08 	.word	0xe000ed08
 800044c:	20000058 	.word	0x20000058
 8000450:	08000355 	.word	0x08000355

08000454 <uart_init>:

#define UART1_BASE_ADDR 0x40011000
void dma_init();
void uart_init()

{
 8000454:	b480      	push	{r7}
 8000456:	b089      	sub	sp, #36	@ 0x24
 8000458:	af00      	add	r7, sp, #0
	// config PA9 - U1Tx, PA10 - U1Rx
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	2300      	movs	r3, #0
 800045c:	60bb      	str	r3, [r7, #8]
 800045e:	4b30      	ldr	r3, [pc, #192]	@ (8000520 <uart_init+0xcc>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000462:	4a2f      	ldr	r2, [pc, #188]	@ (8000520 <uart_init+0xcc>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	6313      	str	r3, [r2, #48]	@ 0x30
 800046a:	4b2d      	ldr	r3, [pc, #180]	@ (8000520 <uart_init+0xcc>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
	uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 8000476:	4b2b      	ldr	r3, [pc, #172]	@ (8000524 <uart_init+0xd0>)
 8000478:	61fb      	str	r3, [r7, #28]
	 *GPIOA_MODER &= ~(0b1111 << 18);
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8000482:	69fb      	ldr	r3, [r7, #28]
 8000484:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (0b10 << 18) | (0b10 << 20);
 8000486:	69fb      	ldr	r3, [r7, #28]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f443 1220 	orr.w	r2, r3, #2621440	@ 0x280000
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOA_AFRH = (uint32_t*)(GPIOA_BASE_ADDR + 0x24);
 8000492:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <uart_init+0xd4>)
 8000494:	61bb      	str	r3, [r7, #24]
	*GPIOA_AFRH &= ~(0xFF << 4); // Clear AFRH9, AFRH10
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	601a      	str	r2, [r3, #0]
	*GPIOA_AFRH |= (0x07 << 4) | (0x07 << 8); // Set AF7 for PA9 (bits 7:4), PA10 (bits 11:8)
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f443 62ee 	orr.w	r2, r3, #1904	@ 0x770
 80004aa:	69bb      	ldr	r3, [r7, #24]
 80004ac:	601a      	str	r2, [r3, #0]

	// uart - BR: 9600 bps, DF: 9 bitdata (include: 1 even parity + 8 bit data)
	__HAL_RCC_USART1_CLK_ENABLE();
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
 80004b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000520 <uart_init+0xcc>)
 80004b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000520 <uart_init+0xcc>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80004be:	4b18      	ldr	r3, [pc, #96]	@ (8000520 <uart_init+0xcc>)
 80004c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004c2:	f003 0310 	and.w	r3, r3, #16
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
	uint32_t* UART1_CR1 = (uint32_t*)(UART1_BASE_ADDR + 0x0C);
 80004ca:	4b18      	ldr	r3, [pc, #96]	@ (800052c <uart_init+0xd8>)
 80004cc:	617b      	str	r3, [r7, #20]
	*UART1_CR1 |= (1 << 9) | (1<<10) | (1<<12);
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f443 52b0 	orr.w	r2, r3, #5632	@ 0x1600
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	601a      	str	r2, [r3, #0]
	uint32_t* UART1_BRR = (uint32_t*)(UART1_BASE_ADDR + 0x08);
 80004da:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <uart_init+0xdc>)
 80004dc:	613b      	str	r3, [r7, #16]

	*UART1_BRR =  (104 << 4) | 3;
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	f240 6283 	movw	r2, #1667	@ 0x683
 80004e4:	601a      	str	r2, [r3, #0]
#if 1 // recieve data by Interrupt
	*UART1_CR1 |= (1<<5); 	// enable USART send interrupt signal to NVIC whenever RXNE set
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 0220 	orr.w	r2, r3, #32
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	601a      	str	r2, [r3, #0]
	uint32_t* ISER1 = (uint32_t*)(0xE000E104);
 80004f2:	4b10      	ldr	r3, [pc, #64]	@ (8000534 <uart_init+0xe0>)
 80004f4:	60fb      	str	r3, [r7, #12]
	*ISER1 |= (1<<5);	// NVIC accept interrupt signal
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0220 	orr.w	r2, r3, #32
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	601a      	str	r2, [r3, #0]

	*UART1_CR1 |= (1<<3) | (1<<2) | (1<< 13);
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800050a:	f043 030c 	orr.w	r3, r3, #12
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	6013      	str	r3, [r2, #0]
	uint32_t* UART1_CR3 = (uint32_t*)(UART1_BASE_ADDR + 0x14);
	*UART1_CR3 |= (1 << 6); //bit 7 DMAR
	dma_init();

#endif
}
 8000512:	bf00      	nop
 8000514:	3724      	adds	r7, #36	@ 0x24
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800
 8000524:	40020000 	.word	0x40020000
 8000528:	40020024 	.word	0x40020024
 800052c:	4001100c 	.word	0x4001100c
 8000530:	40011008 	.word	0x40011008
 8000534:	e000e104 	.word	0xe000e104

08000538 <uart_send>:
}


void uart_send(char data)

{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	71fb      	strb	r3, [r7, #7]
	uint32_t* UART1_DR = (uint32_t*)(UART1_BASE_ADDR +0x04);
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <uart_send+0x48>)
 8000544:	60fb      	str	r3, [r7, #12]
	uint32_t* UART1_SR = (uint32_t*)(UART1_BASE_ADDR +0x00);
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <uart_send+0x4c>)
 8000548:	60bb      	str	r3, [r7, #8]
	while(((*UART1_SR >> 7) & 1) == 0);
 800054a:	bf00      	nop
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	09db      	lsrs	r3, r3, #7
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f8      	beq.n	800054c <uart_send+0x14>
	*UART1_DR =  data;
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	601a      	str	r2, [r3, #0]
	while(((*UART1_SR >> 6) & 1) == 0);
 8000560:	bf00      	nop
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	099b      	lsrs	r3, r3, #6
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f8      	beq.n	8000562 <uart_send+0x2a>
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40011004 	.word	0x40011004
 8000584:	40011000 	.word	0x40011000

08000588 <uart_recv>:

char uart_recv()
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
	uint32_t* UART1_DR = (uint32_t*)(UART1_BASE_ADDR +0x04);
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <uart_recv+0x34>)
 8000590:	60fb      	str	r3, [r7, #12]
	uint32_t* UART1_SR = (uint32_t*)(UART1_BASE_ADDR +0x00);
 8000592:	4b0b      	ldr	r3, [pc, #44]	@ (80005c0 <uart_recv+0x38>)
 8000594:	60bb      	str	r3, [r7, #8]
	while(((*UART1_SR >> 5) & 1) == 0);
 8000596:	bf00      	nop
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	095b      	lsrs	r3, r3, #5
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f8      	beq.n	8000598 <uart_recv+0x10>
	char data_recv = *UART1_DR;
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
	return data_recv;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40011004 	.word	0x40011004
 80005c0:	40011000 	.word	0x40011000

080005c4 <uart_send_string>:

void uart_send_string(char* str)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	int str_len = strlen(str);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe03 	bl	80001d8 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i< str_len; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	e009      	b.n	80005f0 <uart_send_string+0x2c>
	{
		uart_send(str[i]);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff ffa7 	bl	8000538 <uart_send>
	for(int i = 0; i< str_len; i++)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	dbf1      	blt.n	80005dc <uart_send_string+0x18>
	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <USART1_IRQHandler>:

char rx_buffer[2548];
int rx_index;
void USART1_IRQHandler()
{
 8000604:	b598      	push	{r3, r4, r7, lr}
 8000606:	af00      	add	r7, sp, #0
	rx_buffer[rx_index] = uart_recv();
 8000608:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <USART1_IRQHandler+0x24>)
 800060a:	681c      	ldr	r4, [r3, #0]
 800060c:	f7ff ffbc 	bl	8000588 <uart_recv>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <USART1_IRQHandler+0x28>)
 8000616:	551a      	strb	r2, [r3, r4]
	rx_index++;
 8000618:	4b03      	ldr	r3, [pc, #12]	@ (8000628 <USART1_IRQHandler+0x24>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	3301      	adds	r3, #1
 800061e:	4a02      	ldr	r2, [pc, #8]	@ (8000628 <USART1_IRQHandler+0x24>)
 8000620:	6013      	str	r3, [r2, #0]
		uart_send_string("turned off the red led \n");
		memset(rx_buffer, 0, sizeof(rx_buffer));
		rx_index = 0;
	}
#endif
}
 8000622:	bf00      	nop
 8000624:	bd98      	pop	{r3, r4, r7, pc}
 8000626:	bf00      	nop
 8000628:	20000fa0 	.word	0x20000fa0
 800062c:	200005ac 	.word	0x200005ac

08000630 <I2C_Init>:
//
#define I2C_Base_Addr 0x40005400
uint32_t* I2C_CR1 = (uint32_t*)(I2C_Base_Addr + 0x00);
uint32_t* I2C_CR2 = (uint32_t*)(I2C_Base_Addr + 0x04);
void I2C_Init()
{
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0

 //config PB6 - I2C1_SCL, PB9 - I2C1_SDA
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b39      	ldr	r3, [pc, #228]	@ (8000720 <I2C_Init+0xf0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a38      	ldr	r2, [pc, #224]	@ (8000720 <I2C_Init+0xf0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <I2C_Init+0xf0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
 uint32_t* GPIOB_MODER = (uint32_t*)(GPIOB_BASE_ADDR + 0x00);
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <I2C_Init+0xf4>)
 8000654:	617b      	str	r3, [r7, #20]
 *GPIOB_MODER &= ~((0b11 << 12)|(0b11 << 18));
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 2243 	bic.w	r2, r3, #798720	@ 0xc3000
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	601a      	str	r2, [r3, #0]
 *GPIOB_MODER |= (0b10 << 12) | (0b10 << 18);
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f443 2202 	orr.w	r2, r3, #532480	@ 0x82000
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	601a      	str	r2, [r3, #0]

 uint32_t* GPIOB_AFRL =  (uint32_t*)(GPIOB_BASE_ADDR + 0x20);
 800066e:	4b2e      	ldr	r3, [pc, #184]	@ (8000728 <I2C_Init+0xf8>)
 8000670:	613b      	str	r3, [r7, #16]
 uint32_t* GPIOB_AFRH =  (uint32_t*)(GPIOB_BASE_ADDR + 0x24);
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <I2C_Init+0xfc>)
 8000674:	60fb      	str	r3, [r7, #12]
 *GPIOB_AFRL &= ~(0b1111 << 24);
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800067e:	693b      	ldr	r3, [r7, #16]
 8000680:	601a      	str	r2, [r3, #0]
 *GPIOB_AFRL |= (0b0100 <<  24);
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	601a      	str	r2, [r3, #0]
 *GPIOB_AFRH &= ~(0b1111 << 4);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	601a      	str	r2, [r3, #0]
 *GPIOB_AFRH |= (0b0100 <<  4);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	601a      	str	r2, [r3, #0]

 __HAL_RCC_I2C1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <I2C_Init+0xf0>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <I2C_Init+0xf0>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <I2C_Init+0xf0>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
 *I2C_CR2 &= ~(0b11111 << 0); //config freq - bit[5:0]
 80006c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <I2C_Init+0x100>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b19      	ldr	r3, [pc, #100]	@ (8000730 <I2C_Init+0x100>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f022 021f 	bic.w	r2, r2, #31
 80006d0:	601a      	str	r2, [r3, #0]
 *I2C_CR2 |= (16 << 0);
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <I2C_Init+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <I2C_Init+0x100>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f042 0210 	orr.w	r2, r2, #16
 80006e0:	601a      	str	r2, [r3, #0]

 uint32_t* I2C_CCR = (uint32_t*)(I2C_Base_Addr + 0x1C);
 80006e2:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <I2C_Init+0x104>)
 80006e4:	60bb      	str	r3, [r7, #8]
 *I2C_CCR &= ~(0xfff << 0); //config prescaler - bit[11:0]
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	6013      	str	r3, [r2, #0]
 *I2C_CCR |= (40 << 0);
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f043 0228 	orr.w	r2, r3, #40	@ 0x28
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	601a      	str	r2, [r3, #0]

 //enable
 *I2C_CR1 |= (1 << 0);
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <I2C_Init+0x108>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <I2C_Init+0x108>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f042 0201 	orr.w	r2, r2, #1
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	371c      	adds	r7, #28
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40020400 	.word	0x40020400
 8000728:	40020420 	.word	0x40020420
 800072c:	40020424 	.word	0x40020424
 8000730:	20000404 	.word	0x20000404
 8000734:	4000541c 	.word	0x4000541c
 8000738:	20000400 	.word	0x20000400

0800073c <I2C_Write>:

void I2C_Write(uint8_t slave_addr, uint8_t reg_addr, uint8_t value)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	460b      	mov	r3, r1
 8000748:	71bb      	strb	r3, [r7, #6]
 800074a:	4613      	mov	r3, r2
 800074c:	717b      	strb	r3, [r7, #5]
    uint32_t* I2C_CR1 = (uint32_t*)(I2C_Base_Addr + 0x00);
 800074e:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <I2C_Write+0xd0>)
 8000750:	61fb      	str	r3, [r7, #28]
    uint32_t* I2C_SR1 = (uint32_t*)(I2C_Base_Addr + 0x14);
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <I2C_Write+0xd4>)
 8000754:	61bb      	str	r3, [r7, #24]
    uint32_t* I2C_SR2 = (uint32_t*)(I2C_Base_Addr + 0x18);
 8000756:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <I2C_Write+0xd8>)
 8000758:	617b      	str	r3, [r7, #20]
    uint32_t* I2C_DR  = (uint32_t*)(I2C_Base_Addr + 0x10);
 800075a:	4b2f      	ldr	r3, [pc, #188]	@ (8000818 <I2C_Write+0xdc>)
 800075c:	613b      	str	r3, [r7, #16]

    *I2C_CR1 |= (1 << 8); // START
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 0))) {}
 800076a:	bf00      	nop
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0f9      	beq.n	800076c <I2C_Write+0x30>

    *I2C_DR = (slave_addr << 1) | 0;
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	005a      	lsls	r2, r3, #1
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 1))) {}
 8000780:	bf00      	nop
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0f9      	beq.n	8000782 <I2C_Write+0x46>
    uint32_t temp = *I2C_SR1;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	60fb      	str	r3, [r7, #12]
    temp = *I2C_SR2;
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	60fb      	str	r3, [r7, #12]
    (void)temp;
    if (*I2C_SR1 & (1 << 10)) {
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d00c      	beq.n	80007c0 <I2C_Write+0x84>
        *I2C_SR1 &= ~(1 << 10);
 80007a6:	69bb      	ldr	r3, [r7, #24]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	601a      	str	r2, [r3, #0]
        *I2C_CR1 |= (1 << 9);
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	601a      	str	r2, [r3, #0]
        return;
 80007be:	e020      	b.n	8000802 <I2C_Write+0xc6>
    }

    while (!(*I2C_SR1 & (1 << 7))) {} // TXE
 80007c0:	bf00      	nop
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d0f9      	beq.n	80007c2 <I2C_Write+0x86>
    *I2C_DR = reg_addr;
 80007ce:	79ba      	ldrb	r2, [r7, #6]
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	601a      	str	r2, [r3, #0]

    while (!(*I2C_SR1 & (1 << 7))) {} // TXE
 80007d4:	bf00      	nop
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d0f9      	beq.n	80007d6 <I2C_Write+0x9a>
    *I2C_DR = value;
 80007e2:	797a      	ldrb	r2, [r7, #5]
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	601a      	str	r2, [r3, #0]

    while (!(*I2C_SR1 & (1 << 2))) {} // BTF
 80007e8:	bf00      	nop
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f9      	beq.n	80007ea <I2C_Write+0xae>

    *I2C_CR1 |= (1 << 9); // STOP
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	601a      	str	r2, [r3, #0]
}
 8000802:	3724      	adds	r7, #36	@ 0x24
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40005400 	.word	0x40005400
 8000810:	40005414 	.word	0x40005414
 8000814:	40005418 	.word	0x40005418
 8000818:	40005410 	.word	0x40005410

0800081c <I2C_Read>:
uint32_t I2C_Read(uint32_t slave_addr, uint32_t slave_register_addr)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	@ 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
    #define I2C_Base_Addr 0x40005400
    uint32_t* I2C_CR1 = (uint32_t*)(I2C_Base_Addr + 0x00);
 8000826:	4b41      	ldr	r3, [pc, #260]	@ (800092c <I2C_Read+0x110>)
 8000828:	61fb      	str	r3, [r7, #28]
    uint32_t* I2C_SR1 = (uint32_t*)(I2C_Base_Addr + 0x14);
 800082a:	4b41      	ldr	r3, [pc, #260]	@ (8000930 <I2C_Read+0x114>)
 800082c:	61bb      	str	r3, [r7, #24]
    uint32_t* I2C_SR2 = (uint32_t*)(I2C_Base_Addr + 0x18);
 800082e:	4b41      	ldr	r3, [pc, #260]	@ (8000934 <I2C_Read+0x118>)
 8000830:	617b      	str	r3, [r7, #20]
    uint32_t* I2C_DR  = (uint32_t*)(I2C_Base_Addr + 0x10);
 8000832:	4b41      	ldr	r3, [pc, #260]	@ (8000938 <I2C_Read+0x11c>)
 8000834:	613b      	str	r3, [r7, #16]

    uint32_t data;

    // Step 1: Start
    *I2C_CR1 |= (1 << 8);
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 0))) {}
 8000842:	bf00      	nop
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <I2C_Read+0x28>

    // Step 2: gửi địa chỉ slave + write
    *I2C_DR = (slave_addr << 1) | 0;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	005a      	lsls	r2, r3, #1
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 1))) {}
 8000858:	bf00      	nop
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f9      	beq.n	800085a <I2C_Read+0x3e>

    // Step 3: Clear ADDR
    uint32_t temp = *I2C_SR1;
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	60fb      	str	r3, [r7, #12]
    temp = *I2C_SR2;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]

    // Step 4: kiểm tra AF
    if (*I2C_SR1 & (1 << 10)) {
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00d      	beq.n	800089a <I2C_Read+0x7e>
        *I2C_SR1 &= ~(1 << 10);
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	601a      	str	r2, [r3, #0]
        *I2C_CR1 |= (1 << 9);
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	601a      	str	r2, [r3, #0]
        return 0;
 8000896:	2300      	movs	r3, #0
 8000898:	e041      	b.n	800091e <I2C_Read+0x102>
    }

    // Step 5: gửi địa chỉ thanh ghi
    *I2C_DR = slave_register_addr;
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	683a      	ldr	r2, [r7, #0]
 800089e:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 2))) {} // BTF
 80008a0:	bf00      	nop
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f9      	beq.n	80008a2 <I2C_Read+0x86>

    // Step 6: gửi lại START (repeated start)
    *I2C_CR1 |= (1 << 8);
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 0))) {}
 80008ba:	bf00      	nop
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f9      	beq.n	80008bc <I2C_Read+0xa0>

    // Step 7: gửi địa chỉ slave + READ
    *I2C_DR = (slave_addr << 1) | 1;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	601a      	str	r2, [r3, #0]
    while (!(*I2C_SR1 & (1 << 1))) {}
 80008d4:	bf00      	nop
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <I2C_Read+0xba>

    // Step 8: Clear ADDR
    temp = *I2C_SR1;
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	60fb      	str	r3, [r7, #12]
 temp = *I2C_SR2;
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]

    // Step 9: Tắt ACK (chuẩn bị nhận byte cuối)
    *I2C_CR1 &= ~(1 << 10); // ACK = 0
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	601a      	str	r2, [r3, #0]

    // Step 10: chờ dữ liệu về (RXNE)
    while (!(*I2C_SR1 & (1 << 6))) {}
 80008fa:	bf00      	nop
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <I2C_Read+0xe0>

    // Step 11: gửi STOP
    *I2C_CR1 |= (1 << 9);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	601a      	str	r2, [r3, #0]

    // Step 12: đọc dữ liệu
    data = (uint8_t)(*I2C_DR);
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b2db      	uxtb	r3, r3
 800091a:	60bb      	str	r3, [r7, #8]

    (void)temp;
    return data;
 800091c:	68bb      	ldr	r3, [r7, #8]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	@ 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40005400 	.word	0x40005400
 8000930:	40005414 	.word	0x40005414
 8000934:	40005418 	.word	0x40005418
 8000938:	40005410 	.word	0x40005410

0800093c <SPI_Init>:

#define SPI1_BASE_ADDR 0x40013000
void SPI_Init()
{
 800093c:	b480      	push	{r7}
 800093e:	b089      	sub	sp, #36	@ 0x24
 8000940:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b3f      	ldr	r3, [pc, #252]	@ (8000a44 <SPI_Init+0x108>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a44 <SPI_Init+0x108>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b3c      	ldr	r3, [pc, #240]	@ (8000a44 <SPI_Init+0x108>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b38      	ldr	r3, [pc, #224]	@ (8000a44 <SPI_Init+0x108>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a37      	ldr	r2, [pc, #220]	@ (8000a44 <SPI_Init+0x108>)
 8000968:	f043 0310 	orr.w	r3, r3, #16
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <SPI_Init+0x108>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <SPI_Init+0x108>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <SPI_Init+0x108>)
 8000984:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000988:	6453      	str	r3, [r2, #68]	@ 0x44
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <SPI_Init+0x108>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

    //Config chân, PA5 SCLK, PA7 SPI1_MOSI, PA6 SPI1_MISO, PE3 CS_I2C

    uint32_t* GPIOA_MODER = (uint32_t*)(GPIOA_BASE_ADDR + 0x00);
 8000996:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <SPI_Init+0x10c>)
 8000998:	61fb      	str	r3, [r7, #28]
    uint32_t* GPIOA_AFRL =  (uint32_t*)(GPIOA_BASE_ADDR + 0x20);
 800099a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <SPI_Init+0x110>)
 800099c:	61bb      	str	r3, [r7, #24]

    // AF cònig
    *GPIOA_MODER &= ~((0b11 << 10) | (0b11 << 12) | (0b11 << 14));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f423 427c 	bic.w	r2, r3, #64512	@ 0xfc00
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	601a      	str	r2, [r3, #0]
    *GPIOA_MODER |=  ((0b10 << 10) | (0b10 << 12) | (0b10 << 14));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f443 4228 	orr.w	r2, r3, #43008	@ 0xa800
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	601a      	str	r2, [r3, #0]

    // AF05 cho 3 pin A5,6,7
    *GPIOA_AFRL &= ~((0xF << 20) | (0xF << 24) | (0xF << 28));
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	601a      	str	r2, [r3, #0]
    *GPIOA_AFRL |=  ((0x5 << 20) | (0x5 << 24) | (0x5 << 28));
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80009ca:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	6013      	str	r3, [r2, #0]

    //PE3 CS_I2C
    uint32_t* GPIOE_MODER = (uint32_t*)(GPIOE_BASE_ADDR + 0x00);
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <SPI_Init+0x114>)
 80009d4:	617b      	str	r3, [r7, #20]
    *GPIOE_MODER &= ~(0b11 << 6);
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	601a      	str	r2, [r3, #0]
    *GPIOE_MODER |= (0b01 << 6);
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	601a      	str	r2, [r3, #0]

    uint16_t* SPI_CR1 = (uint16_t*)(SPI1_BASE_ADDR + 0x00);
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <SPI_Init+0x118>)
 80009f0:	613b      	str	r3, [r7, #16]
    // Master mode
    *SPI_CR1 |= (1 << 2);
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	801a      	strh	r2, [r3, #0]

    // Set BR = 0b100
    *SPI_CR1 |=  (0b100 << 3);
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	801a      	strh	r2, [r3, #0]

    //Set bit SSI và SSM = 1
    *SPI_CR1 |= (1 << 8);
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	801a      	strh	r2, [r3, #0]
    *SPI_CR1 |= (1 << 9);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	693b      	ldr	r3, [r7, #16]
 8000a28:	801a      	strh	r2, [r3, #0]

    // SPI enable
    *SPI_CR1 |= (1 << 6);
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	801a      	strh	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3724      	adds	r7, #36	@ 0x24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020020 	.word	0x40020020
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40013000 	.word	0x40013000

08000a58 <SPI_Read_Reg>:

uint8_t SPI_Read_Reg(uint8_t reg_addr)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
    // Địa chỉ thanh ghi
    volatile uint32_t* GPIOE_ODR = (uint32_t*)(GPIOE_BASE_ADDR + 0x14);
 8000a62:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <SPI_Read_Reg+0xa8>)
 8000a64:	617b      	str	r3, [r7, #20]
    volatile uint16_t* SPI1_DR   = (uint16_t*)(SPI1_BASE_ADDR + 0x0C);
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <SPI_Read_Reg+0xac>)
 8000a68:	613b      	str	r3, [r7, #16]
    volatile uint16_t* SPI1_SR   = (uint16_t*)(SPI1_BASE_ADDR + 0x08);
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <SPI_Read_Reg+0xb0>)
 8000a6c:	60fb      	str	r3, [r7, #12]

    uint8_t dummy = 0x00;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	72fb      	strb	r3, [r7, #11]
    uint8_t data  = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	72bb      	strb	r3, [r7, #10]

    // 1. Kéo chân SS (PE3) xuống mức thấp (0) để chọn Slave
    *GPIOE_ODR &= ~(1 << 3);
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f023 0208 	bic.w	r2, r3, #8
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	601a      	str	r2, [r3, #0]

    // 2. Gửi địa chỉ OR 0x80 (bit 7 = 1 là đọc)
    while(!(*SPI1_SR & (1 << 1))); // TXE: Data register empty
 8000a82:	bf00      	nop
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <SPI_Read_Reg+0x2c>
    *SPI1_DR = reg_addr | 0x80;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	801a      	strh	r2, [r3, #0]

    // 3. Đợi nhận xong, đọc dữ liệu rác
    while(!(*SPI1_SR & (1 << 0))); // RXNE: Data received
 8000aa0:	bf00      	nop
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0f8      	beq.n	8000aa2 <SPI_Read_Reg+0x4a>
    (void)*SPI1_DR; // Đọc bỏ byte rác
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	881b      	ldrh	r3, [r3, #0]

    // 4. Gửi dummy để tạo xung clock
    while(!(*SPI1_SR & (1 << 1)));
 8000ab4:	bf00      	nop
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f8      	beq.n	8000ab6 <SPI_Read_Reg+0x5e>
    *SPI1_DR = dummy;
 8000ac4:	7afb      	ldrb	r3, [r7, #11]
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	801a      	strh	r2, [r3, #0]

    // 5. Đợi nhận xong, lấy giá trị thực
    while(!(*SPI1_SR & (1 << 0)));
 8000acc:	bf00      	nop
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0f8      	beq.n	8000ace <SPI_Read_Reg+0x76>
    data = *SPI1_DR;
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	72bb      	strb	r3, [r7, #10]

    // 6. Kéo chân SS (PE3) lên mức cao (1) để kết thúc
    *GPIOE_ODR |= (1 << 3);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f043 0208 	orr.w	r2, r3, #8
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	601a      	str	r2, [r3, #0]

    return data;
 8000af0:	7abb      	ldrb	r3, [r7, #10]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021014 	.word	0x40021014
 8000b04:	4001300c 	.word	0x4001300c
 8000b08:	40013008 	.word	0x40013008

08000b0c <main>:

#define LSM303_ACC_ADDR 0x19
uint32_t data_i2c;

int main()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b12:	f000 f8e1 	bl	8000cd8 <HAL_Init>
	Leds_Init();
 8000b16:	f7ff fb67 	bl	80001e8 <Leds_Init>
	PA0_input_Init();
 8000b1a:	f7ff fbbd 	bl	8000298 <PA0_input_Init>
	EXTI_Init();
 8000b1e:	f7ff fc3f 	bl	80003a0 <EXTI_Init>
	uart_init();
 8000b22:	f7ff fc97 	bl	8000454 <uart_init>
	I2C_Init();
 8000b26:	f7ff fd83 	bl	8000630 <I2C_Init>
	SPI_Init();
 8000b2a:	f7ff ff07 	bl	800093c <SPI_Init>
	uart_send_string("I'm Jin \r\n");
 8000b2e:	481b      	ldr	r0, [pc, #108]	@ (8000b9c <main+0x90>)
 8000b30:	f7ff fd48 	bl	80005c4 <uart_send_string>
	uart_send_string("START PROGRAM Blue_v.1.0 \r\n");
 8000b34:	481a      	ldr	r0, [pc, #104]	@ (8000ba0 <main+0x94>)
 8000b36:	f7ff fd45 	bl	80005c4 <uart_send_string>
	I2C_Write(LSM303_ACC_ADDR, 0x20, 0x12);
 8000b3a:	2212      	movs	r2, #18
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	2019      	movs	r0, #25
 8000b40:	f7ff fdfc 	bl	800073c <I2C_Write>
	data_i2c = I2C_Read(LSM303_ACC_ADDR, 0x20);
 8000b44:	2120      	movs	r1, #32
 8000b46:	2019      	movs	r0, #25
 8000b48:	f7ff fe68 	bl	800081c <I2C_Read>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <main+0x98>)
 8000b50:	6013      	str	r3, [r2, #0]
	uint8_t id = SPI_Read_Reg(0x0F);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f7ff ff80 	bl	8000a58 <SPI_Read_Reg>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	71fb      	strb	r3, [r7, #7]
		}
#endif

	while(1)
		{
			Led_Ctrl(LED_Blue,ON_LED);
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f7ff fb6c 	bl	800023c <Led_Ctrl>
			uart_send_string("I'm Jin \r\n");
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <main+0x90>)
 8000b66:	f7ff fd2d 	bl	80005c4 <uart_send_string>
			HAL_Delay(1000);
 8000b6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b6e:	f000 f925 	bl	8000dbc <HAL_Delay>
			Led_Ctrl(LED_Blue,OFF_LED);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2003      	movs	r0, #3
 8000b76:	f7ff fb61 	bl	800023c <Led_Ctrl>
			HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7e:	f000 f91d 	bl	8000dbc <HAL_Delay>
			if(rx_index == sizeof(rx_buffer))
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <main+0x9c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f640 12f4 	movw	r2, #2548	@ 0x9f4
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d1e6      	bne.n	8000b5c <main+0x50>
			{
				uart_send_string("FW_RED_v1.0 recieving done !!! \r\n");
 8000b8e:	4807      	ldr	r0, [pc, #28]	@ (8000bac <main+0xa0>)
 8000b90:	f7ff fd18 	bl	80005c4 <uart_send_string>
				update();
 8000b94:	f000 fa4c 	bl	8001030 <__update_veneer>
			Led_Ctrl(LED_Blue,ON_LED);
 8000b98:	e7e0      	b.n	8000b5c <main+0x50>
 8000b9a:	bf00      	nop
 8000b9c:	08001038 	.word	0x08001038
 8000ba0:	08001044 	.word	0x08001044
 8000ba4:	20000fa4 	.word	0x20000fa4
 8000ba8:	20000fa0 	.word	0x20000fa0
 8000bac:	08001060 	.word	0x08001060

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 f891 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c88:	f7ff ffea 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f000 f98d 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff ff29 	bl	8000b0c <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000400 	.word	0x20000400
  ldr r1, =_edata
 8000cc4:	2000058c 	.word	0x2000058c
  ldr r2, =_sidata
 8000cc8:	08001094 	.word	0x08001094
  ldr r2, =_sbss
 8000ccc:	2000058c 	.word	0x2000058c
  ldr r4, =_ebss
 8000cd0:	20000fac 	.word	0x20000fac

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f931 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	200f      	movs	r0, #15
 8000d08:	f000 f808 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff ff50 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <HAL_InitTick+0x54>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <HAL_InitTick+0x58>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f93b 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e00e      	b.n	8000d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d80a      	bhi.n	8000d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295
 8000d58:	f000 f911 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_InitTick+0x5c>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000408 	.word	0x20000408
 8000d74:	20000410 	.word	0x20000410
 8000d78:	2000040c 	.word	0x2000040c

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000410 	.word	0x20000410
 8000da0:	20000fa8 	.word	0x20000fa8

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000fa8 	.word	0x20000fa8

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000410 	.word	0x20000410

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff5c 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffb0 	bl	8000f24 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8001008 <__libc_init_array+0x38>)
 8000fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800100c <__libc_init_array+0x3c>)
 8000fd6:	1b64      	subs	r4, r4, r5
 8000fd8:	10a4      	asrs	r4, r4, #2
 8000fda:	2600      	movs	r6, #0
 8000fdc:	42a6      	cmp	r6, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8001010 <__libc_init_array+0x40>)
 8000fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8001014 <__libc_init_array+0x44>)
 8000fe4:	f000 f818 	bl	8001018 <_init>
 8000fe8:	1b64      	subs	r4, r4, r5
 8000fea:	10a4      	asrs	r4, r4, #2
 8000fec:	2600      	movs	r6, #0
 8000fee:	42a6      	cmp	r6, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff8:	4798      	blx	r3
 8000ffa:	3601      	adds	r6, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001002:	4798      	blx	r3
 8001004:	3601      	adds	r6, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	0800108c 	.word	0x0800108c
 800100c:	0800108c 	.word	0x0800108c
 8001010:	0800108c 	.word	0x0800108c
 8001014:	08001090 	.word	0x08001090

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr

08001030 <__update_veneer>:
 8001030:	f85f f000 	ldr.w	pc, [pc]	@ 8001034 <__update_veneer+0x4>
 8001034:	20000551 	.word	0x20000551

Disassembly of section .data:

20000400 <I2C_CR1>:
20000400:	40005400                                .T.@

20000404 <I2C_CR2>:
20000404:	40005404                                .T.@

20000408 <SystemCoreClock>:
20000408:	00f42400                                .$..

2000040c <uwTickPrio>:
2000040c:	00000010                                ....

20000410 <uwTickFreq>:
20000410:	00000001                                ....

20000414 <flash_unlock>:
{
20000414:	b480      	push	{r7}
20000416:	b083      	sub	sp, #12
20000418:	af00      	add	r7, sp, #0
	volatile uint32_t *FLASH_CR = (uint32_t*)(FLASH_BASE_ADDR + 0x10);
2000041a:	4b0b      	ldr	r3, [pc, #44]	@ (20000448 <flash_unlock+0x34>)
2000041c:	607b      	str	r3, [r7, #4]
	volatile uint32_t *FLASH_KEYR = (uint32_t*)(FLASH_BASE_ADDR + 0x04);
2000041e:	4b0b      	ldr	r3, [pc, #44]	@ (2000044c <flash_unlock+0x38>)
20000420:	603b      	str	r3, [r7, #0]
	if (((*FLASH_CR >> 31) & 1) == 1)
20000422:	687b      	ldr	r3, [r7, #4]
20000424:	681b      	ldr	r3, [r3, #0]
20000426:	0fdb      	lsrs	r3, r3, #31
20000428:	f003 0301 	and.w	r3, r3, #1
2000042c:	2b01      	cmp	r3, #1
2000042e:	d105      	bne.n	2000043c <flash_unlock+0x28>
		*FLASH_KEYR = 0x45678123;
20000430:	683b      	ldr	r3, [r7, #0]
20000432:	4a07      	ldr	r2, [pc, #28]	@ (20000450 <flash_unlock+0x3c>)
20000434:	601a      	str	r2, [r3, #0]
		*FLASH_KEYR = 0xCDEF89AB;
20000436:	683b      	ldr	r3, [r7, #0]
20000438:	4a06      	ldr	r2, [pc, #24]	@ (20000454 <flash_unlock+0x40>)
2000043a:	601a      	str	r2, [r3, #0]
}
2000043c:	bf00      	nop
2000043e:	370c      	adds	r7, #12
20000440:	46bd      	mov	sp, r7
20000442:	f85d 7b04 	ldr.w	r7, [sp], #4
20000446:	4770      	bx	lr
20000448:	40023c10 	.word	0x40023c10
2000044c:	40023c04 	.word	0x40023c04
20000450:	45678123 	.word	0x45678123
20000454:	cdef89ab 	.word	0xcdef89ab

20000458 <flash_erase>:
{
20000458:	b580      	push	{r7, lr}
2000045a:	b084      	sub	sp, #16
2000045c:	af00      	add	r7, sp, #0
2000045e:	6078      	str	r0, [r7, #4]
	uint32_t *FLASH_SR = (uint32_t *)(FLASH_BASE_ADDR + 0x0C);
20000460:	4b19      	ldr	r3, [pc, #100]	@ (200004c8 <flash_erase+0x70>)
20000462:	60fb      	str	r3, [r7, #12]
	uint32_t *FLASH_CR = (uint32_t *)(FLASH_BASE_ADDR + 0x10);
20000464:	4b19      	ldr	r3, [pc, #100]	@ (200004cc <flash_erase+0x74>)
20000466:	60bb      	str	r3, [r7, #8]
	flash_unlock();
20000468:	f7ff ffd4 	bl	20000414 <flash_unlock>
	while(((*FLASH_SR >> 16) & 1) == 1);
2000046c:	bf00      	nop
2000046e:	68fb      	ldr	r3, [r7, #12]
20000470:	681b      	ldr	r3, [r3, #0]
20000472:	0c1b      	lsrs	r3, r3, #16
20000474:	f003 0301 	and.w	r3, r3, #1
20000478:	2b00      	cmp	r3, #0
2000047a:	d1f8      	bne.n	2000046e <flash_erase+0x16>
	*FLASH_CR |= 1 << 1;
2000047c:	68bb      	ldr	r3, [r7, #8]
2000047e:	681b      	ldr	r3, [r3, #0]
20000480:	f043 0202 	orr.w	r2, r3, #2
20000484:	68bb      	ldr	r3, [r7, #8]
20000486:	601a      	str	r2, [r3, #0]
	*FLASH_CR &= ~(0xF << 3);
20000488:	68bb      	ldr	r3, [r7, #8]
2000048a:	681b      	ldr	r3, [r3, #0]
2000048c:	f023 0278 	bic.w	r2, r3, #120	@ 0x78
20000490:	68bb      	ldr	r3, [r7, #8]
20000492:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= sector_number << 3;
20000494:	68bb      	ldr	r3, [r7, #8]
20000496:	681a      	ldr	r2, [r3, #0]
20000498:	687b      	ldr	r3, [r7, #4]
2000049a:	00db      	lsls	r3, r3, #3
2000049c:	431a      	orrs	r2, r3
2000049e:	68bb      	ldr	r3, [r7, #8]
200004a0:	601a      	str	r2, [r3, #0]
	*FLASH_CR |= 1 << 16 ;
200004a2:	68bb      	ldr	r3, [r7, #8]
200004a4:	681b      	ldr	r3, [r3, #0]
200004a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
200004aa:	68bb      	ldr	r3, [r7, #8]
200004ac:	601a      	str	r2, [r3, #0]
	while(((*FLASH_SR >> 16) & 1) == 1);
200004ae:	bf00      	nop
200004b0:	68fb      	ldr	r3, [r7, #12]
200004b2:	681b      	ldr	r3, [r3, #0]
200004b4:	0c1b      	lsrs	r3, r3, #16
200004b6:	f003 0301 	and.w	r3, r3, #1
200004ba:	2b00      	cmp	r3, #0
200004bc:	d1f8      	bne.n	200004b0 <flash_erase+0x58>
}
200004be:	bf00      	nop
200004c0:	bf00      	nop
200004c2:	3710      	adds	r7, #16
200004c4:	46bd      	mov	sp, r7
200004c6:	bd80      	pop	{r7, pc}
200004c8:	40023c0c 	.word	0x40023c0c
200004cc:	40023c10 	.word	0x40023c10

200004d0 <flash_program>:
{
200004d0:	b580      	push	{r7, lr}
200004d2:	b088      	sub	sp, #32
200004d4:	af00      	add	r7, sp, #0
200004d6:	60f8      	str	r0, [r7, #12]
200004d8:	60b9      	str	r1, [r7, #8]
200004da:	607a      	str	r2, [r7, #4]
	uint32_t *FLASH_SR = (uint32_t *)(FLASH_BASE_ADDR + 0x0C);
200004dc:	4b1a      	ldr	r3, [pc, #104]	@ (20000548 <flash_program+0x78>)
200004de:	61bb      	str	r3, [r7, #24]
	uint32_t *FLASH_CR = (uint32_t *)(FLASH_BASE_ADDR + 0x10);
200004e0:	4b1a      	ldr	r3, [pc, #104]	@ (2000054c <flash_program+0x7c>)
200004e2:	617b      	str	r3, [r7, #20]
	flash_unlock();
200004e4:	f7ff ff96 	bl	20000414 <flash_unlock>
	while(((*FLASH_SR >> 16) & 1) == 1);
200004e8:	bf00      	nop
200004ea:	69bb      	ldr	r3, [r7, #24]
200004ec:	681b      	ldr	r3, [r3, #0]
200004ee:	0c1b      	lsrs	r3, r3, #16
200004f0:	f003 0301 	and.w	r3, r3, #1
200004f4:	2b00      	cmp	r3, #0
200004f6:	d1f8      	bne.n	200004ea <flash_program+0x1a>
	*FLASH_CR |= 1 << 0;
200004f8:	697b      	ldr	r3, [r7, #20]
200004fa:	681b      	ldr	r3, [r3, #0]
200004fc:	f043 0201 	orr.w	r2, r3, #1
20000500:	697b      	ldr	r3, [r7, #20]
20000502:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i += 4)
20000504:	2300      	movs	r3, #0
20000506:	61fb      	str	r3, [r7, #28]
20000508:	e00c      	b.n	20000524 <flash_program+0x54>
	    uint32_t word = *(uint32_t *)(data_buf + i);
2000050a:	68ba      	ldr	r2, [r7, #8]
2000050c:	69fb      	ldr	r3, [r7, #28]
2000050e:	4413      	add	r3, r2
20000510:	681b      	ldr	r3, [r3, #0]
20000512:	613b      	str	r3, [r7, #16]
	    *(volatile uint32_t *)(address + i) = word;
20000514:	68fa      	ldr	r2, [r7, #12]
20000516:	69fb      	ldr	r3, [r7, #28]
20000518:	4413      	add	r3, r2
2000051a:	693a      	ldr	r2, [r7, #16]
2000051c:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < size; i += 4)
2000051e:	69fb      	ldr	r3, [r7, #28]
20000520:	3304      	adds	r3, #4
20000522:	61fb      	str	r3, [r7, #28]
20000524:	687b      	ldr	r3, [r7, #4]
20000526:	69fa      	ldr	r2, [r7, #28]
20000528:	429a      	cmp	r2, r3
2000052a:	d3ee      	bcc.n	2000050a <flash_program+0x3a>
	while(((*FLASH_SR >> 16) & 1) == 1);
2000052c:	bf00      	nop
2000052e:	69bb      	ldr	r3, [r7, #24]
20000530:	681b      	ldr	r3, [r3, #0]
20000532:	0c1b      	lsrs	r3, r3, #16
20000534:	f003 0301 	and.w	r3, r3, #1
20000538:	2b00      	cmp	r3, #0
2000053a:	d1f8      	bne.n	2000052e <flash_program+0x5e>
}
2000053c:	bf00      	nop
2000053e:	bf00      	nop
20000540:	3720      	adds	r7, #32
20000542:	46bd      	mov	sp, r7
20000544:	bd80      	pop	{r7, pc}
20000546:	bf00      	nop
20000548:	40023c0c 	.word	0x40023c0c
2000054c:	40023c10 	.word	0x40023c10

20000550 <update>:
{
20000550:	b580      	push	{r7, lr}
20000552:	b082      	sub	sp, #8
20000554:	af00      	add	r7, sp, #0
	__asm("CPSID i");
20000556:	b672      	cpsid	i
	flash_erase(0);
20000558:	2000      	movs	r0, #0
2000055a:	f7ff ff7d 	bl	20000458 <flash_erase>
	flash_program((char*)0x08000000, rx_buffer, 2548);
2000055e:	f640 12f4 	movw	r2, #2548	@ 0x9f4
20000562:	4907      	ldr	r1, [pc, #28]	@ (20000580 <update+0x30>)
20000564:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
20000568:	f7ff ffb2 	bl	200004d0 <flash_program>
	uint32_t* AIRCR = (uint32_t*)0xE000ED0C;
2000056c:	4b05      	ldr	r3, [pc, #20]	@ (20000584 <update+0x34>)
2000056e:	607b      	str	r3, [r7, #4]
	*AIRCR = (0x5FA << 16) | (1<<2);
20000570:	687b      	ldr	r3, [r7, #4]
20000572:	4a05      	ldr	r2, [pc, #20]	@ (20000588 <update+0x38>)
20000574:	601a      	str	r2, [r3, #0]
}
20000576:	bf00      	nop
20000578:	3708      	adds	r7, #8
2000057a:	46bd      	mov	sp, r7
2000057c:	bd80      	pop	{r7, pc}
2000057e:	bf00      	nop
20000580:	200005ac 	.word	0x200005ac
20000584:	e000ed0c 	.word	0xe000ed0c
20000588:	05fa0004 	.word	0x05fa0004
